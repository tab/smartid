{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Golang client for the Smart-ID API (https://www.smart-id.com). It is a simple wrapper around the API, which helps easily integrate Smart-ID authentication into Golang applications.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Flexible client configuration</li> <li>Concurrent processing</li> <li>Optional TLS configuration (certificate pinning)</li> </ul>"},{"location":"#contents","title":"Contents","text":"<ul> <li>Installation</li> <li>Usage</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Use <code>go get</code> to install the package</p> <pre><code>go get -u github.com/tab/smartid\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#configure-a-client","title":"Configure a client","text":"<p>Create a new client using <code>NewClient()</code> and customize its configuration using chainable methods.</p> <pre><code>package main\n\nimport (\n  \"context\"\n  \"log\"\n  \"time\"\n\n  \"github.com/tab/smartid\"\n)\n\nfunc main() {\n  client := smartid.NewClient().\n    WithRelyingPartyName(\"DEMO\").\n    WithRelyingPartyUUID(\"00000000-0000-0000-0000-000000000000\").\n    WithCertificateLevel(\"QUALIFIED\").\n    WithHashType(\"SHA512\").\n    WithInteractionType(\"displayTextAndPIN\").\n    WithDisplayText60(\"Enter PIN1\").\n    WithDisplayText200(\"Confirm the authentication request and enter PIN1\").\n    WithURL(\"https://sid.demo.sk.ee/smart-id-rp/v2\").\n    WithTimeout(60 * time.Second)\n\n  if err := client.Validate(); err != nil {\n    log.Fatal(\"Invalid configuration:\", err)\n  }\n\n  // Further processing...\n}\n</code></pre> <p>Check client default configuration values:</p> <pre><code>const (\n  CertificateLevel = requests.CertificateLevelQUALIFIED\n  InteractionType  = requests.InteractionTypeDisplayTextAndPIN\n  DisplayText60    = \"Enter PIN1\"\n  DisplayText200   = \"Confirm the authentication request and enter PIN1\"\n  Timeout          = requests.Timeout\n  URL              = \"https://sid.demo.sk.ee/smart-id-rp/v2\"\n)\n\ncfg := &amp;config.Config{\n  CertificateLevel: CertificateLevel,\n  HashType:         utils.HashTypeSHA512,\n  InteractionType:  InteractionType,\n  DisplayText60:    DisplayText60,\n  DisplayText200:   DisplayText200,\n  URL:              URL,\n  Timeout:          Timeout,\n}\n</code></pre>"},{"location":"usage/#start-authentication","title":"Start authentication","text":"<p>Initiate a new authentication session with the <code>Smart-ID</code> provider by calling <code>CreateSession</code>. This function generates a random hash, constructs the session request, and returns a session that includes an identifier and a verification code.</p> <pre><code>func main() {\n  // Create a client...\n\n  identity := smartid.NewIdentity(smartid.TypePNO, \"EE\", \"30303039914\")\n\n  session, err := client.CreateSession(context.Background(), identity)\n  if err != nil {\n    log.Fatal(\"Error creating session:\", err)\n  }\n\n  fmt.Println(\"Session created:\", session)\n}\n</code></pre>"},{"location":"usage/#fetch-authentication-session","title":"Fetch authentication session","text":"<pre><code>func main() {\n  // Create a client...\n\n  person, err := client.FetchSession(context.Background(), sessionId)\n  if err != nil {\n    log.Fatal(\"Error fetching session:\", err)\n  }\n\n  fmt.Println(\"Session status:\", session.State)\n}\n</code></pre>"},{"location":"usage/#async-example","title":"Async example","text":"<p>For applications requiring the processing of multiple authentication sessions simultaneously, <code>Smart-ID</code> provides a worker model. Create a worker using <code>NewWorker</code>, configure its concurrency and queue size, and then start processing.</p> <pre><code>package main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"log\"\n  \"sync\"\n  \"time\"\n\n  \"github.com/tab/smartid\"\n)\n\nfunc main() {\n  client := smartid.NewClient().\n    WithRelyingPartyName(\"DEMO\").\n    WithRelyingPartyUUID(\"00000000-0000-0000-0000-000000000000\").\n    WithCertificateLevel(\"QUALIFIED\").\n    WithHashType(\"SHA512\").\n    WithInteractionType(\"displayTextAndPIN\").\n    WithDisplayText60(\"Enter PIN1\").\n    WithDisplayText200(\"Confirm the authentication request and enter PIN1\").\n    WithURL(\"https://sid.demo.sk.ee/smart-id-rp/v2\").\n    WithTimeout(60 * time.Second)\n\n  identities := []string{\n    smartid.NewIdentity(smartid.TypePNO, \"EE\", \"30303039914\"),\n    smartid.NewIdentity(smartid.TypePNO, \"EE\", \"30403039917\"),\n    smartid.NewIdentity(smartid.TypePNO, \"EE\", \"30403039928\"),\n    // Add more identities as needed\n  }\n\n  worker := smartid.NewWorker(client).\n    WithConcurrency(50).\n    WithQueueSize(100)\n\n  ctx := context.Background()\n  worker.Start(ctx)\n  defer worker.Stop()\n\n  var wg sync.WaitGroup\n\n  for _, identity := range identities {\n    wg.Add(1)\n\n    session, err := client.CreateSession(ctx, identity)\n    if err != nil {\n      log.Println(\"Error creating session:\", err)\n      wg.Done()\n      continue\n    }\n    fmt.Println(\"Session created:\", session)\n\n    resultCh := worker.Process(ctx, session.Id)\n    go func() {\n      defer wg.Done()\n      result := &lt;-resultCh\n      if result.Err != nil {\n        log.Println(\"Error fetching session:\", result.Err)\n      } else {\n        fmt.Println(\"Fetched person:\", result.Person)\n      }\n    }()\n  }\n\n  wg.Wait()\n}\n</code></pre>"},{"location":"usage/#certificate-pinning-optional","title":"Certificate pinning (optional)","text":"<pre><code>package main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"sync\"\n  \"time\"\n\n  \"github.com/tab/smartid\"\n)\n\nfunc main() {\n  manager, err := smartid.NewCertificateManager(\"./certs\")\n  if err != nil {\n    fmt.Println(\"Failed to create certificate manager:\", err)\n  }\n  tlsConfig := manager.TLSConfig()\n\n  client := smartid.NewClient().\n    WithRelyingPartyName(\"DEMO\").\n    WithRelyingPartyUUID(\"00000000-0000-0000-0000-000000000000\").\n    WithCertificateLevel(\"QUALIFIED\").\n    WithHashType(\"SHA512\").\n    WithInteractionType(\"displayTextAndPIN\").\n    WithDisplayText60(\"Enter PIN1\").\n    WithDisplayText200(\"Confirm the authentication request and enter PIN1\").\n    WithURL(\"https://sid.demo.sk.ee/smart-id-rp/v2\").\n    WithTimeout(60 * time.Second).\n    WithTLSConfig(tlsConfig)\n\n  // Further processing...\n</code></pre>"},{"location":"usage/#prepare-identity","title":"Prepare identity","text":"<p>Smart-ID requires a properly formatted identity string. Use the <code>NewIdentity</code> function to create this string. It combines the identity type, country code, and the identifier value.</p> <pre><code>package main\n\nimport (\n  \"fmt\"\n\n  \"github.com/tab/smartid\"\n)\n\nfunc main() {\n  identity := smartid.NewIdentity(smartid.TypePNO, \"EE\", \"30303039914\")\n  fmt.Println(\"Formatted identity:\", identity)\n}\n</code></pre>"},{"location":"usage/#examples","title":"Examples","text":"<pre><code>go run cmd/client/main.go\n</code></pre> <pre><code>Session created: &amp;{f74cc84e-6e43-45f8-b778-ccf3795bb06b 9449}\nFetched person: &amp;{PNOEE-30303039914 30303039914 TESTNUMBER OK}\n</code></pre> <ul> <li>f74cc84e-6e43-45f8-b778-ccf3795bb06b \u2013 session id</li> <li> <p>9449 \u2013 verification code</p> </li> <li> <p>PNOEE-30303039914 \u2013 formatted identity</p> </li> <li>30303039914 \u2013 personal identification code</li> <li>TESTNUMBER \u2013 person first name</li> <li>OK \u2013 person last name</li> </ul>"}]}